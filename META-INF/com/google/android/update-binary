#!/sbin/sh

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false

# Default permissions
umask 022

##########################################################################################
# Functions
##########################################################################################

# DETERMINE IF PIXEL (A/B OTA) DEVICE
ABDeviceCheck=$(cat /proc/cmdline | grep slot_suffix | wc -l)
if [ "$ABDeviceCheck" -gt 0 ]; then
  isABDevice=true
  SYSTEM=/system/system
else
  isABDevice=false
  SYSTEM=/system
fi

supersuimg=$(ls /cache/su.img /data/su.img 2>/dev/null);

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  if [ -z "$FILES" ]; then
    FILES="$SYSTEM/build.prop"
  fi
  cat $FILES 2>/dev/null | sed -n "$REGEX" | head -n 1
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

supersu_is_mounted() {
  case `mount` in
    *" $1 "*) echo 1;;
    *) echo 0;;
  esac;
}

mount_image() {
  if [ ! -d "$2" ]; then
    mount -o rw,remount rootfs /
    mkdir -p $2 2>/dev/null
    ($BOOTMODE) && mount -o ro,remount rootfs /
    [ ! -d "$2" ] && return 1
  fi
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        if [ ! -f "$LOOPDEVICE" ]; then
          mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
        fi
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          if (! is_mounted $2); then
            $SYSTEM/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
          if (! is_mounted $2); then
            $SYSTEM/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
        fi
        if (is_mounted $2); then
          ui_print "    Mounting $1 to $2..."
          break;
        fi
      fi
    done
  fi
}

set_perm() {
  chown $2:$3 $1 || exit 1
  chmod $4 $1 || exit 1
  if [ ! -z "$5" ]; then
    chcon $5 $1 2>/dev/null
  else
    chcon 'u:object_r:system_file:s0' $1 2>/dev/null
  fi
}

set_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $4 $6
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $2 $3 $5 $6
  done
}

sys_mk_ch() {
  mkdir -p "$1"
  chmod "$2" "$1"
}

sys_cp_ch() {
  cp -f "$1" "$2"
  chmod "$3" "$2"
  restorecon "$2"
}

sys_cpbak_ch() {
  if [ -f "$2" ]; then
	mv -f "$2" "$2.bak"
	echo "$2.bak" >> $INFO
  fi
  echo "$2" >> $INFO
  cp "$1" "$2"
  chmod "$3" "$2"
}

mktouch() {
  mkdir -p ${1%/*}
  if [ -z "$2" ]; then
    touch $1
  else
    echo $2 > $1
  fi
  chmod 644 $1
}

request_size_check() {
  reqSizeM=`unzip -l "$1" 2>/dev/null | tail -n 1 | awk '{ print $1 }'`
  reqSizeM=$((reqSizeM / 1048576 + 1))
}

image_size_check() {
  e2fsck -yf $1
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

OUTFD=$2
ZIP=$3

magisk_install() {
  MAGISK=true
  MK_PRFX="mkdir -p"
  CP_PRFX="cp -af"
  UNITY="$MODPATH"
  MK_SFFX=""
  CP_SFFX=""
  SOURCEDIR="$SOURCEDIR"
  UNITYPATCH="/cache/magisk/audmodlib"
}

system_install() {
  MAGISK=false
  MK_PRFX="sys_mk_ch"
  CP_PRFX="sys_cpbak_ch"
  UNITY=""
  MK_SFFX=" 0755"
  CP_SFFX=" 0644"
  SOURCEDIR=""
  UNITYPATCH=""
}

##########################################################################################
#
# Instructions:
#
# 1. This is a Unified installer for both Magisk and System install, so be sure to
#    follow the template provided for "app_install_logic", "unified_mod_wipe",
#    & "unified_mod_<xxxx>"
# 2. magisk_audmodlib and files with the audmodlib prefix as such need to remain
#    untouched unless an update has occured, however use unified_mod_patch to remove
#    and then add the lines corresponding to your mod
# 3. If applicable, make "APP1", etc. to be the same name as your .apk/app folder
#    in system/app/ (i.e. APP1=Ax, APP2=ViPER4Android, APP3=AM3DZirene and so on)
# 4. common/$MODID.sh, system/addon.d/$MODID.sh & system/su.d/$MODID.sh app specific
#    scripts will be named the same as your MODID in config.sh (i.e. MODID=v4afx so
#    common/$MODID.sh=v4afx.sh)
# 5. Edit common/$MODID.sh to remove or restore the specific audio_effects or
#    audio_policy files that were added in the unified_mod_patch portion of the installer
# 6. You can obviously use your mod specific system.prop or post-fs-data.sh as part of
#    the mod, but make sure not edit the designated audmodlib specific files
# 7. DO NOT delete any of the credits for @ahrion or @topjohnwu mentioned in this script
#
##########################################################################################

APP1="ViPER4AndroidFX"

app_install_logic() {
  ########################################################################################
  # Logic for correct application installation
  ########################################################################################

  ########## v DO NOT REMOVE v ##########
  if [ -d $SYSTEM/priv-app ]; then
    APPDIR=priv-app
  else
    APPDIR=app
  fi
  ########## ^ DO NOT REMOVE ^ ##########

  #### v INSERT MORE APPS IF MORE EXIST v ####
  if [ "$API" -ge "21" ]; then
    APPTXT="   Installing apps for Lollipop and above..."
    APP1PATH=$APPDIR/$APP1
  else
    APPTXT="   Installing apps for Lollipop and below..."
    APP1PATH=$APPDIR
  fi
  #### ^ INSERT MORE APPS IF MORE EXIST ^ ####
}

script_install_logic() {
  ########################################################################################
  # Logic for correct system script installation
  ########################################################################################

  ########## v DO NOT REMOVE v ##########
  # DETERMINE ROOT BOOT SCRIPT TYPE
  EXT=".sh"
  if [ "$supersuimg" ] || [ -d /su ]; then
  	if [ "$(cat /su/bin/su | grep SuperSU)" ]; then
  	  SH=/su/su.d
  	else
  	  SH=$SYSTEM/etc/init.d
  	  EXT=""
  	fi
  elif [ -d $SYSTEM/su ] || [ -f $SYSTEM/xbin/daemonsu ] || [ -f $SYSTEM/xbin/sugote ]; then
	   SH=$SYSTEM/su.d
  elif [ -f $SYSTEM/xbin/su ]; then
  	if [ "$(cat /system/xbin/su | grep SuperSU)" ]; then
  	  SH=$SYSTEM/su.d
  	else
  	  SH=$SYSTEM/etc/init.d
      EXT=""
  	fi
  else
    SH=$SYSTEM/etc/init.d
    EXT=""
  fi
  ########## ^ DO NOT REMOVE ^ ##########
}

unified_prop_removal() {
  ui_print " "
  ui_print "- Checking for obsolete props to remove-"
  if [ "$MAGISK" == true ]; then
		rm -f $SYSTEM/etc/init.d/$AUDMODLIBID-props
		rm -f /su/su.d/$AUDMODLIBID-props.sh
		rm -f $SYSTEM/su.d/$AUDMODLIBID-props.sh
		if [ "$PROPCOMP" == true ]; then
			AMLPROP="$AUDMODLIBPATH$SYSTEM/etc/$AUDMODLIBID-props"
		else
			AMLPROP="$AUDMODLIBPATH/system.prop"
			sed -i "s/setprop //g" $1
			sed -i "s/ /=/g" $1
		fi
	else
    	AMLPROP="$SH/$AUDMODLIBID-props$EXT"
		for AMLSCRIPT in $SYSTEM/etc/init.d/$AUDMODLIBID-props /su/su.d/$AUDMODLIBID-props.sh $SYSTEM/su.d/$AUDMODLIBID-props.sh; do
		  if [ "$AMLPROP" != "$AMLSCRIPT" ]; then
				rm -f $AMLSCRIPT
		  fi
		done
	  fi
  if [ -f $AMLPROP ]; then
    if [ "$(sed -n '4,$p' $1)" ]; then
  	  ui_print "   Removing obsolete props..."
  	  NEWPROPS="$(sed -n '4,$ p' $1)"
  	  printf '%s\n' "$NEWPROPS" | while IFS= read -r linenew
  	  do
  	    if [ "$(cat $AMLPROP | grep "$linenew")" ]; then
  	  	    sed -i "/$linenew/d" $AMLPROP
        fi
  	  done
    fi
  else
    ui_print "   No obsolete build props to remove!..."
  fi
}

unified_prop_copy() {
  if [ "$MAGISK" == true ]; then
  	if [ "$PROPCOMP" == true ]; then
  		AMLPROP="$AUDMODLIBPATH$SYSTEM/etc/$AUDMODLIBID-props"
  		NEWDIR="$AUDMODLIBPATH$SYSTEM/etc"
  	else
  		AMLPROP="$AUDMODLIBPATH/system.prop"
  		NEWDIR="$AUDMODLIBPATH"
  		sed -i "s/setprop //g" $1
  		sed -i "s/ /=/g" $1
  	fi
  else
    AMLPROP="$SH/$AUDMODLIBID-props$EXT"
    NEWDIR="$SH"
  fi
  if [ "$(sed -n '4,$p' $1)" ]; then
  	if [ ! -f $AMLPROP ]; then
  		mkdir -p $NEWDIR
  		echo "#!/system/bin/sh" > $AMLPROP
  	fi
    OLDPROPS="$(sed -n '2,$ p' $AMLPROP)"
    NEWPROPS="$(sed -n '4,$ p' $1)"
    printf '%s\n' "$NEWPROPS" | while IFS= read -r linenew
    do
  	  PRESENT="false"
  	  printf '%s\n' "$OLDPROPS" | {
    	  while IFS= read -r lineold
    	  do
    	    if [ "$linenew" == "$lineold" ]; then
    		  PRESENT="true"
    	    fi
    	  done
    	  if [ $PRESENT == "false" ]; then
    	    sed -i -e "\$a$linenew" $AMLPROP
    	  fi
       }
    done
  	if [ "$MAGISK" == false ]; then
  	  chmod 0700 $AMLPROP
  	  restorecon $AMLPROP
  	fi
  fi
}

unified_mod_wipe() {
  ########################################################################################
  # Wipe before System install
  ########################################################################################

  ########## v DO NOT REMOVE v ##########
  #### CLEANING UP ####
  ui_print " "
  ui_print "- Cleaning up previous installations -"
  ########## ^ DO NOT REMOVE ^ ##########

  #### v INSERT YOUR FILE REMOVALS v ####
  # REMOVE FILES
  ui_print "   Removing files..."
  rm -rf /data/app/com.vipercn.viper4android_v2-1
  rm -rf /data/app/com.vipercn.viper4android_v2-2
  rm -rf /data/app/com.vipercn.viper4android_v2-3
  rm -rf /data/app/com.audlabs.viperfx-1
  rm -rf /data/app/com.audlabs.viperfx-2
  rm -rf /data/app/com.audlabs.viperfx-3
  rm -rf $SYSTEM/app/$APP1
  rm -rf $SYSTEM/priv-app/$APP1
  rm -f $SYSTEM/addon.d/$MODID.sh
  rm -f $SYSTEM/app/$APP1.apk
  rm -f $SYSTEM/app/$APP1/$APP1.apk
  rm -f $SYSTEM/etc/init.d/$MODID
  rm -f $SYSTEM/etc/init.d/$AUDMODLIBID
  rm -f $SYSTEM/lib/soundfx/libv4a_fx_jb_$DRVARCH.so
  rm -f $SYSTEM/priv-app/$APP1.apk
  rm -f $SYSTEM/priv-app/$APP1/$APP1.apk
  rm -f /su/su.d/$MODID.sh
  rm -f /su/su.d/$AUDMODLIBID.sh
  rm -f $SYSTEM/su.d/$MODID.sh
  rm -f $SYSTEM/su.d/$AUDMODLIBID.sh
  #### ^ INSERT YOUR FILE REMOVALS ^ ####

  #### v INSERT YOUR REMOVE PATCH v ####
  # REMOVE LIBRARIES & EFFECTS
  ui_print "   Removing library & effect lines..."
  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE; do
    if [ -f $CFG ]; then
      # REMOVE EFFECTS
      sed -i '/v4a_standard_fx {/,/}/d' $CFG
      # REMOVE LIBRARIES
      sed -i '/v4a_fx {/,/}/d' $CFG
    fi
  done
  #### ^ INSERT YOUR REMOVE PATCH ^ ####

  #### v INSERT YOUR RESTORE AND BACKUP FUNCTIONS v ####
  # REPLACE VENDOR FILE WITH PREVIOUS BACKUP
  if [ -f $V_CONFIG_FILE ] && [ -f $V_CONFIG_FILE.bak ]; then
    # RESTORE BACKED UP CONFIGS
    cp -af $V_CONFIG_FILE.bak $V_CONFIG_FILE
  fi

  # BACKUP CONFIGS
  ui_print "   Backing up existing audio_effects cfg files..."
  for BACKUP in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE; do
    if [ -f $BACKUP ]; then
      cp -f $BACKUP $BACKUP.bak
    fi
  done
  #### ^ INSERT YOUR RESTORE AND BACKUP FUNCTIONS ^ ####
}

unified_mod_directory() {
  ########################################################################################
  # Make directories for Unified install
  ########################################################################################

  ########## v DO NOT REMOVE v ##########
  #### PREPARE INSTALL ####
  ui_print " "
  ui_print "- Preparing installation -"

  # CREATING DIRECTORIES
  ui_print "   Creating directories..."

  if [ "$MAGISK" == true ]; then
    rm -rf $MODPATH 2>/dev/null
    mkdir -p $MODPATH
  fi
  ########## ^ DO NOT REMOVE ^ ##########

  #### v INSERT YOUR DIRECTORY MAKING v ####
  $MK_PRFX $UNITY$SYSTEM/$APP1PATH$MK_SFFX

  $MK_PRFX $UNITY$SYSTEM/lib/soundfx$MK_SFFX

  if [ "$MAGISK" == false ]; then
    sys_mk_ch $SH 0755
    if [ -d $SYSTEM/addon.d ]; then
      sys_mk_ch $SYSTEM/addon.d 0755
    fi
    for CFG in $CONFIG_FILE $V_CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG; do
      if [ -f $CFG ]; then
        sys_mk_ch ${CFG%/*} 0755
      fi
    done
  fi
  #### ^ INSERT YOUR DIRECTORY MAKING ^ ####
}

unified_mod_copy() {
  ########################################################################################
  # Copy files over for Unified install
  ########################################################################################

  ########## v DO NOT REMOVE v ##########
  #### INSTALL FILES ####
  ui_print " "
  ui_print "- Installing apps, libs, & scripts -"
  ########## ^ DO NOT REMOVE ^ ##########

  #### v INSERT YOUR FILE INSTALL v ####
  # INSTALL SCRIPTS
  if [ "$MAGISK" == false ]; then
    if [ "$supersuimg" ] || [ -d /su ]; then
      if [ "$(cat /su/bin/su | grep SuperSU)" ]; then
	      ui_print "   Installing scripts for systemless SuperSU..."
  	  else
  	    ui_print "   Installing scripts for phh SuperUser..."
  	  fi
  	elif [ -d $SYSTEM/su ] || [ -f $SYSTEM/xbin/daemonsu ] || [ -f $SYSTEM/xbin/sugote ]; then
  	  ui_print "   Installing scripts for system SuperSU..."
  	elif [ -f $SYSTEM/xbin/su ]; then
  	  if [ "$(cat /system/xbin/su | grep SuperSU)" ]; then
  	    ui_print "   Installing scripts for system SuperSU..."
  	  else
  	    ui_print "   Installing scripts for LineageOS SU..."
  	  fi
    elif [ -d $SYSTEM/etc/init.d ]; then
      ui_print "   Installing scripts for non root..."
    fi
    sys_cp_ch $INSTALLER/common/$AUDMODLIBID-post-fs-data.sh $SH/$AUDMODLIBID$EXT 0644

    # INSTALL ROM BACKUP SCRIPT
    if [ -d $SYSTEM/addon.d ]; then
      ui_print "   Addon.d detected. Installing backup script..."
      sys_cp_ch $INSTALLER/system/addon.d/$MODID.sh $SYSTEM/addon.d/$MODID.sh 0644
    else
      ui_print "   ! Addon.d not detected. Backup script not installed..."
    fi
    touch $INFO
    echo "$SH/$AUDMODLIBID$EXT" > $INFO
  	echo "$SH/$AUDMODLIBID-props$EXT" >> $INFO
  fi

  # INSTALL APPS
  ui_print "$APPTXT"
  $CP_PRFX $INSTALLER/system/app/$APP1/$APP1.apk $UNITY$SYSTEM/$APP1PATH/$APP1.apk$CP_SFFX

  # ADD BUILDPROPS
  ui_print "   Adding build props..."
  unified_prop_copy $INSTALLER/common/audmodlib-props.prop

  # INSTALL LIBRARIES
  ui_print "   Installing libraries..."
  unzip -pq $INSTALLER/system/app/$APP1/$APP1.apk assets/libv4a_fx_jb_$DRVARCH.so > $UNITY$SYSTEM/lib/soundfx/libv4a_fx_ics.so
  echo "$UNITY$SYSTEM/lib/soundfx/libv4a_fx_ics.so" >> $INFO

  if [ "$MAGISK" == false ]; then
    sed -i 's/\/system\///g' $INFO
  fi
  #### ^ INSERT YOUR FILE INSTALL ^ ####
}

magisk_audmodlib() {
  ########################################################################################
  # Audio Modification Library / This is where the magick happens for Magisk
  ########################################################################################

  ########## v DO NOT REMOVE v ##########
  ### CREATE AUDIO MODIFICATION LIBRARY ###
  ui_print " "
  ui_print "- Installing Audio Modification Library -"

  ui_print "   Installing scripts for MagiskSU..."
  mkdir -p $MOUNTPATH/.core/post-fs-data.d
  cp -af $INSTALLER/common/$AUDMODLIBID-post-fs-data.sh $MOUNTPATH/.core/post-fs-data.d/$AUDMODLIBID.sh
  mkdir -p $MOUNTPATH/.core/service.d
  cp -af $INSTALLER/common/$AUDMODLIBID-service.sh $MOUNTPATH/.core/service.d/$AUDMODLIBID.sh
  cp -af $INSTALLER/common/$MODID-service.sh $MOUNTPATH/.core/service.d/$MODID.sh

  if [ -d /cache/magisk/audmodlib ] && [[ ! -d $AUDMODLIBPATH || ! -d /magisk/audmodlib ]]; then
    rm -rf /cache/magisk/audmodlib
  fi

  if [ ! -d /cache/magisk/audmodlib ] && [[ ! -d $AUDMODLIBPATH || ! -d /magisk/audmodlib ]]; then
    SOURCEDIR=""
  elif [ -d /cache/magisk/audmodlib ]; then
    SOURCEDIR=/cache/magisk/audmodlib
  elif [ -d $AUDMODLIBPATH ]; then
    SOURCEDIR=$AUDMODLIBPATH
  elif [ -d /magisk/audmodlib ]; then
    SOURCEDIR=/magisk/audmodlib
  fi

  magisk_install

  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE $A2DP_AUD_POL $AUD_POL $AUD_POL_CONF $AUD_POL_VOL $SUB_AUD_POL $USB_AUD_POL $V_AUD_OUT_POL $V_AUD_POL $MIX_PATH $MIX_PATH_TASH $STRIGG_MIX_PATH $STRIGG_MIX_PATH_9330 $V_MIX_PATH; do
    if [ -f $CFG ]; then
      mkdir -p /cache/magisk/audmodlib${CFG%/*}
    fi
  done

  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE $A2DP_AUD_POL $AUD_POL $AUD_POL_CONF $AUD_POL_VOL $SUB_AUD_POL $USB_AUD_POL $V_AUD_OUT_POL $V_AUD_POL $MIX_PATH $MIX_PATH_TASH $STRIGG_MIX_PATH $STRIGG_MIX_PATH_9330 $V_MIX_PATH; do
    if [ -f $CFG ]; then
      if [ ! -f $CFG.bak ]; then
        cp -af $CFG /cache/magisk/audmodlib$CFG.bak
      else
        cp -af $CFG.bak /cache/magisk/audmodlib$CFG.bak
      fi
    fi
  done

  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE $A2DP_AUD_POL $AUD_POL $AUD_POL_CONF $AUD_POL_VOL $SUB_AUD_POL $USB_AUD_POL $V_AUD_OUT_POL $V_AUD_POL $MIX_PATH $MIX_PATH_TASH $STRIGG_MIX_PATH $STRIGG_MIX_PATH_9330 $V_MIX_PATH; do
    if [ -f $CFG ]; then
      cp -af $SOURCEDIR$CFG /cache/magisk/audmodlib$CFG
    fi
  done

  set_perm_recursive  /cache/magisk/audmodlib  0  0  0755  0644

  mkdir -p $AUDMODLIBPATH

  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE $A2DP_AUD_POL $AUD_POL $AUD_POL_CONF $AUD_POL_VOL $SUB_AUD_POL $USB_AUD_POL $V_AUD_OUT_POL $V_AUD_POL $MIX_PATH $MIX_PATH_TASH $STRIGG_MIX_PATH $STRIGG_MIX_PATH_9330 $V_MIX_PATH; do
    if [ -f $CFG ]; then
      mkdir -p $AUDMODLIBPATH${CFG%/*}
    fi
  done

  unified_mod_patch

  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE $A2DP_AUD_POL $AUD_POL $AUD_POL_CONF $AUD_POL_VOL $SUB_AUD_POL $USB_AUD_POL $V_AUD_OUT_POL $V_AUD_POL $MIX_PATH $MIX_PATH_TASH $STRIGG_MIX_PATH $STRIGG_MIX_PATH_9330 $V_MIX_PATH; do
    if [ -f $CFG ]; then
      cp -af /cache/magisk/audmodlib$CFG.bak $AUDMODLIBPATH$CFG.bak
    fi
  done

  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE $A2DP_AUD_POL $AUD_POL $AUD_POL_CONF $AUD_POL_VOL $SUB_AUD_POL $USB_AUD_POL $V_AUD_OUT_POL $V_AUD_POL $MIX_PATH $MIX_PATH_TASH $STRIGG_MIX_PATH $STRIGG_MIX_PATH_9330 $V_MIX_PATH; do
    if [ -f $CFG ]; then
      cp -af /cache/magisk/audmodlib$CFG $AUDMODLIBPATH$CFG
    fi
  done

  set_perm_recursive  $AUDMODLIBPATH  0  0  0755  0644

  ui_print "   ! AudModLib framework by ahrion @ XDA !"
  ########## ^ DO NOT REMOVE ^ ##########
}

unified_mod_patch() {
  ########################################################################################
  # Audio Modification Library file patcher for Unified install
  ########################################################################################

  ########## v DO NOT REMOVE v ##########
  #### PATCHING FILES ####
  ui_print "   Patching necessary cfg files"
  ########## ^ DO NOT REMOVE ^ ##########

  #### v INSERT YOUR FILE PATCHES v ####
  # REMOVE LIBRARIES & EFFECTS
  ui_print "    Removing library & effect lines..."
  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE; do
    if [ -f $CFG ]; then
      # REMOVE EFFECTS
      sed -i '/v4a_standard_fx {/,/}/d' $UNITYPATCH$CFG
      # REMOVE LIBRARIES
      sed -i '/v4a_fx {/,/}/d' $UNITYPATCH$CFG
    fi
  done

  # ADD LIBRARIES & EFFECTS
  ui_print "    Patching existing audio_effects files..."
  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE; do
    if [ -f $CFG ]; then
      # ADD EFFECTS
      sed -i 's/^effects {/effects {\n  v4a_standard_fx {\n    library v4a_fx\n    uuid 41d3c987-e6cf-11e3-a88a-11aba5d5c51b\n  }/g' $UNITYPATCH$CFG
      # ADD LIBRARIES
      sed -i 's/^libraries {/libraries {\n  v4a_fx {\n    path \/system\/lib\/soundfx\/libv4a_fx_ics.so\n  }/g' $UNITYPATCH$CFG
    fi
  done
  #### ^ INSERT YOUR FILE PATCHES ^ ####
}

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

if $BOOTMODE && ! is_mounted /magisk; then
  ui_print "   ! Magisk is not activated!... abort"
  exit 1
fi

# Fix SuperSU.....
$BOOTMODE && $BINDIR/sepolicy-inject --live "allow fsck * * *"

# This path should work in any cases
TMPDIR=/dev/tmp

MOUNTPATH=/magisk
IMGNAME=magisk.img

if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMGNAME=magisk_merge.img
fi

mkdir -p $TMPDIR 2>/dev/null
cd $TMPDIR
unzip -o "$ZIP" config.sh

if [ ! -f "config.sh" ]; then
  ui_print "   ! Failed: Unable to extract zip file!"
  exit 1
fi

source config.sh

INSTALLER=$TMPDIR/$MODID
MODPATH=$MOUNTPATH/$MODID
AUDMODLIBPATH=$MOUNTPATH/$AUDMODLIBID

mkdir -p $INSTALLER
cd $INSTALLER
unzip -o "$ZIP" "common/*" module.prop
unzip -o "$ZIP" "system/*"

##########################################################################################
# Main
##########################################################################################

# Print mod name
print_modname

#### MOUNT FILESYSTEMS ####
ui_print "- Mounting filesystems -"

ui_print "   Mounting /cache..."
mount /cache 2>/dev/null
ui_print "   Mounting /data..."
mount /data 2>/dev/null

if [ "$supersuimg" ]; then
  if [ "$(supersu_is_mounted /su)" == 0 ]; then
    ui_print "   Mounting /su...";
    test ! -e /su && mkdir /su;
    mount -t ext4 -o rw,noatime $supersuimg /su 2>/dev/null
    for i in 0 1 2 3 4 5 6 7; do
      test "$(supersu_is_mounted /su)" == 1 && break;
      loop=/dev/block/loop$i;
      mknod $loop b 7 $i;
      losetup $loop $supersuimg;
      mount -t ext4 -o loop $loop /su; 2>/dev/null
    done;
  fi;
fi;

SPACE=" "
if [ $isABDevice == true ]; then
  ui_print "   ! A/B OTA device detected!"
  WRITE=rw
  SPACE="  "
elif [ -f /data/magisk.img ] || [ -d /magisk ]; then
  WRITE=ro
elif [ ! -f /data/magisk.img ] || [ ! -d /magisk ]; then
  WRITE=rw
fi

ui_print "$SPACE  Mounting /system($WRITE)..."
mount -o $WRITE /system 2>/dev/null
ui_print "$SPACE  Mounting /vendor($WRITE)..."
mount -o $WRITE /vendor 2>/dev/null

if [ $isABDevice == true ] || [ ! -d $SYSTEM/vendor ]; then
  VENDOR=/vendor
else
  VENDOR=/system/vendor
fi

if [ ! -f "$SYSTEM/build.prop" ]; then
  ui_print "   ! Failed: /system could not be mounted!"
  exit 1
fi

API=`grep_prop ro.build.version.sdk`
ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
ABILONG=`grep_prop ro.product.cpu.abi`
MIUIVER=`grep_prop ro.miui.ui.version.name`

ARCH=arm
DRVARCH=NEON
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; DRVARCH=X86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; DRVARCH=X86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; IS64BIT=true; DRVARCH=X86; fi;

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

### FILE LOCATIONS ###
# AUDIO EFFECTS
CONFIG_FILE=$SYSTEM/etc/audio_effects.conf
HTC_CONFIG_FILE=$SYSTEM/etc/htc_audio_effects.conf
OTHER_V_FILE=$SYSTEM/etc/audio_effects_vendor.conf
OFFLOAD_CONFIG=$SYSTEM/etc/audio_effects_offload.conf
V_CONFIG_FILE=$VENDOR/etc/audio_effects.conf
# AUDIO POLICY
A2DP_AUD_POL=$SYSTEM/etc/a2dp_audio_policy_configuration.xml
AUD_POL=$SYSTEM/etc/audio_policy.conf
AUD_POL_CONF=$SYSTEM/etc/audio_policy_configuration.xml
AUD_POL_VOL=$SYSTEM/etc/audio_policy_volumes.xml
SUB_AUD_POL=$SYSTEM/etc/r_submix_audio_policy_configuration.xml
USB_AUD_POL=$SYSTEM/etc/usb_audio_policy_configuration.xml
V_AUD_OUT_POL=$VENDOR/etc/audio_output_policy.conf
V_AUD_POL=$VENDOR/etc/audio_policy.conf
# MIXER PATHS
MIX_PATH=$SYSTEM/etc/mixer_paths.xml
MIX_PATH_TASH=$SYSTEM/etc/mixer_paths_tasha.xml
STRIGG_MIX_PATH=$SYSTEM/sound_trigger_mixer_paths.xml
STRIGG_MIX_PATH_9330=$SYSTEM/sound_trigger_mixer_paths_wcd9330.xml
V_MIX_PATH=$VENDOR/etc/mixer_paths.xml
# INFO FILE
if [ -d $SYSTEM/addon.d ]; then
  INFO=$SYSTEM/addon.d/$MODID-files
else
  INFO=$SYSTEM/etc/$MODID-files
fi

if is_mounted /data; then
  IMG=/data/$IMGNAME
  if [ ! -f "/data/magisk.img" ]; then
    ui_print " "
    ui_print "   ! Magisk is not installed!"
    ui_print "    ! Installing on system!"
    # Prepare Install
    system_install
    script_install_logic
    app_install_logic
    # Remove props
    unified_prop_removal $INSTALLER/common/$AUDMODLIBID-props-remove.prop
    # Wipe files
    unified_mod_wipe
    # Create mod paths
    unified_mod_directory
    # Copy files
    unified_mod_copy
    # Patch files
    unified_mod_patch
    #### COMPLETING INSTALL ####
    ui_print " "
    ui_print "    --------- INSTALLATION SUCCESSFUL ---------"
    ui_print " "
    ui_print "Installer brought to you by ahrion @ XDA"
    ui_print " "
    exit 0;
  fi
else
  IMG=/cache/magisk.img
  ui_print " "
  ui_print "***********************************"
  ui_print "*      !! Data unavailible !!     *"
  ui_print "* Magisk detection is impossible  *"
  ui_print "* Installation will still proceed *"
  ui_print "*  But please make sure you have  *"
  ui_print "*        Magisk installed!!       *"
  ui_print "***********************************"
  ui_print " "
fi

request_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "   $IMG detected!"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    SIZE=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "    Resizing $IMG to ${SIZE}M..."
    resize2fs $IMG ${SIZE}M
  fi
else
  SIZE=$((reqSizeM / 32 * 32 + 64));
  ui_print "   Creating $IMG with size ${SIZE}M..."
  make_ext4fs -l ${SIZE}M -a /magisk -S $INSTALLER/common/file_contexts_image $IMG
fi

mount_image $IMG $MOUNTPATH
if ! is_mounted $MOUNTPATH; then
  ui_print "   ! $IMG mount failed... abort"
  exit 1
fi

# Prepare install
if [ ! -f /data/magisk/magisk ]; then
  ui_print "   ! Magisk version < 13 detected. Using prop workaround"
  PROPCOMP=true
fi
magisk_install
app_install_logic

# Remove props
unified_prop_removal $INSTALLER/common/$AUDMODLIBID-props-remove.prop

# Wipe files
unified_mod_wipe

# Create mod paths
unified_mod_directory

# Copy files
unified_mod_copy

# Patch files
magisk_audmodlib

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
  mktouch $AUDMODLIBPATH$TARGET/.replace
done

# Auto Mount
if $AUTOMOUNT; then
  mktouch $MODPATH/auto_mount
  mktouch $AUDMODLIBPATH/auto_mount
fi

# prop files
if $PROPFILE; then
  cp -af $INSTALLER/common/system.prop $MODPATH/system.prop
fi

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
cp -af $INSTALLER/common/audmodlibmodule.prop $AUDMODLIBPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch /magisk/$MODID/update
  mktouch /magisk/$AUDMODLIBID/update
  cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
  cp -af $INSTALLER/common/audmodlibmodule.prop /magisk/$AUDMODLIBID/module.prop
fi

# post-fs-data mode scripts
if $POSTFSDATA; then
  cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
fi

# service mode scripts
if $LATESTARTSERVICE; then
  cp -af $INSTALLER/common/service.sh $MODPATH/service.sh
fi

#### COMPLETING INSTALL ####
ui_print " "
ui_print "- Completing install -"

ui_print "   Setting permissions..."
set_permissions

ui_print "   Unmounting partitions..."
umount $MOUNTPATH
losetup -d $LOOPDEVICE
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
  ui_print "   Shrinking $IMG to ${NEWDATASIZE}M..."
  resize2fs $IMG ${NEWDATASIZE}M
fi

if ! $BOOTMODE; then
  if [ "$supersuimg" ] || [ -d /su ]; then
    umount /su
  fi
  umount /system
  umount /vendor 2>/dev/null
fi

if [ $isABDevice == true ]; then
  mount -o ro /system 2>/dev/null
  mount -o ro /vendor 2>/dev/null
fi

ui_print " "
ui_print "    --------- INSTALLATION SUCCESSFUL ---------"

ui_print " "
ui_print "Installer brought to you by ahrion @ XDA"

# Please leave this message in your flashable zip for credits :)
ui_print " "
ui_print "    *******************************************"
ui_print "    *      Powered by Magisk (@topjohnwu)     *"
ui_print "    *******************************************"
ui_print " "
exit 0
